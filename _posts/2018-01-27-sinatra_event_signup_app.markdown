---
layout: post
title:      "Sinatra Event Signup App"
date:       2018-01-27 22:21:32 +0000
permalink:  sinatra_event_signup_app
---


For my final assessment in Sinatra, I was instructed to build an MVC Sinatra Application, using ActiveRecord and Sinatra. The requirements were pretty straightforward. My app needed to  have multiple models, with at least one "has_many" relationship, have the ability create user accounts, give the user the ability to create, read, update and destroy their own information, and include validations to ensure valid data entry. The hardest part for me was deciding what to create. I've thought of so many cool apps to create since the beginning of my studies at Flatiron, but for some reason I couldn't think of anything. I was excited to start the project, but at a loss for what to do. Finally, I decided to create an app that allows users to create and track their events. I wanted to start out pretty basic. Just get the bare bones working, and then later, I could add more functionality, possibly a third model - volunteers.  

Before I began writing any code, I defined my app on paper. What was it's purpose? What would the design look like? What files would I need before I even began coding.? What gems? What page would be the initial landing page, etc.? After I finished that, I created a repository in github, and set up my application. I set up my environment, config.ru, created a Gemfile, Rakefile, and an app file containing my controllers, models, and views.  Next, I worked on my models and their relationships, thought about the routes I needed and the pages I wanted to display. Only then, did I start to code.   

I created two tables - Users and Events. Next I defined the tables and created my models. Users 'have_many events, and events belong_to a user. I knew I wanted the user to have a secure password, so I added a secure password statement to my User model. Next I created my controllers. In the application controller, I required my environment, created sessions, defined my helper methods, and set up my intial get request. On my config.ru page, I added all controllers (users, events, and application).

Next, I created my users controller. I required the gem 'rack-flash' as I knew I would want validation messages to display. Then I added the 'rack-flash3' gem to my Gemfile. Back in the users controller, I set the events controller to inherit from the application controller. Next, I added get and post requests for the users/show, login, and signup pages and a get request for logout. I wanted to see how these routes were working before I started setting up the events controller, so I added some dummy data. I tested my routes and fixed my code accordingly. Once my routes were working, I created my users view pages.

First I added an index and layout file to my views folder. Next I started to build out these pages. I created forms on my index, signup, and login pages, and then set up my show page. My show page would be responsible for showing my user a list of only their events. I found a generic layout on the web and pasted it into my layout page. I tested everything in the browser once again, made changes where needed and started on my events controller.

Again I required rack-flash and set the events controller to inherit from the application controller. I knew I wanted the user to be able to edit and create their own event. I set up get and post requests for the new, edit, show, and home pages. I wanted the homepage to display all of the users events, the show page to display a single event, the new page to create an event, and an edit page to edit the users event. I tested my views and fixed errors. I did it! Everything worked. I felt great. This went so much more smoothly than the CLI project, and a lot faster. Now I could play. 

I wanted to add buttons to all pages, so the user wouldn't have to type anything into the browser to switch pages, so I did. I tested it out, and my edit page wouldn't work. I got stuck for half a day on the edit patch request. I COULD NOT figure out why it wasn't working. I tried everything. I used tux and my browser to figure out where I was going wrong. I discovered that my Events object was returning nil, instead of an actual event. Finally, after writing different lines of code, I realized that I had set up my edit form on TWO pages. I had meant to create only an edit button on my show page, but I created a whole form. Ugh! Even though it took me awhile to figure out what went wrong, I didn't feel like I should throw in the towel, as I did on my CLI project. This time I was even more determined to fix the problem. Now I'm trying to decide if I should create that volunteer model, or just keep plugging through the lectures and labs. There are so many more things I could do with this App. but time is of the essence. Regardless, this project was a lot of fun. 
