---
layout: post
title:      "Candy Shop Rails Assessment"
date:       2018-05-11 20:07:26 +0000
permalink:  candy_shop_rails_assessment
---


As always, it took me a little while to decide what to create for this assessment. Inspired by the Amusement Park app, I decided to create a Candy Shop. I spent my first few hours designing and thinking about my app. What would I want it to do? What views would I want, what functionality was required, and what did I want to include as an "extra" feature to be implemented at a later stage. I made a few lists, and got started. 

I created the new app using rails new. Next, I created my models. I decided to have three; a User model, a Candy model, and a Purchase model. The purchase model would be my join table, containing a candy_id and user_id. I used rails generate to add my models and all attributes, migrated and pushed all up to github. After that, I focused on my gemfile. I knew I needed a few additional apps and did a little research. I needed an authenticity gem so my app would have password encryption, and enabled the bcrypt gem. I added a few other gems that were in other rails labs that I'd completed and read about online, and gems to allow third party signup and login. I tried omniauth facebook first, but had so much trouble, that I switched to Omniauth google 2. I also added thin and dotenv-rails gems per the recommendations of a few sites dedicated to third party logins.

Next I tackled object relationships, the has_many and belongs_to between my models, and set up a few validations. As I reviewed validations, I read about a few that I'd never used. It's always exciting when you try something new and it works. I began with my user model, then created my candy model and finally, my purchase model. I knew I wanted to set up a few messages for my users as they progressed through my app and decided to create a few methods in my purchase Model. These methods would tell the user if they had enough money, and a big enough appetite to purchase their desired candy. I had a lot of fun with this part, but it was probably the least DRY of my app.   

Next I built out my controllers. I set up current_user methods and logged_in methods in the application controller, then moved through users_controller, purchase controller, and candies controller. I completed the new, create, show, and index methods first, and left the edit/update/delete methods for later on. I was anxious to see if everything worked, so I built out a few views. I built a form, new, home and show view for my users, and the same for candies, but substituted an index view for the home view. I knew I needed to have a sessions/new view, and b/c that was the quickest - I got that out of the way early. I moved on to my form views, which were pretty straight forward using  form_for, and rendered the forms as needed in my other views. I spent some time setting up my show and index views. I enjoyed playing around with the views, and love how it's possible to easily manipulate the information presented to the user.

Once I had the base of my app completed, and my views populating correctly, I started to research how to signup through a third party. This was by far, the most challenging task. I encountered many problems with my local environment, and with the methods I used for creating new sessions. It took me 3 days to get everything to work. Once that was done, I fixed up my views, and played around with keeping track of my candy inventory. I made sure my error messages were displaying properly, and I broke and fixed my app about a thousand times. The further along I get in the course, and the more I learn, the more I realize I need to learn. When I first read this assessment, I was totally overwhelmed, but after I broke it down into small steps, I found it less daunting and much more manageable. There is still so much more I could do with this app, but I need to keep plugging away. I'm happy with this latest version, and now need to focus on expanding my technical vocabulary.  
